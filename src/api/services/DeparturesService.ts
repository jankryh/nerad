// Slu≈æba pro odjezdy s modul√°rn√≠ architekturou

import { BaseAPIService } from './BaseAPIService';
import { DepartureBoardResponse, ArrivalBoardResponse, ApiError, TravelTimeCalculation } from '../../types';
import { cacheKeys } from '../../utils/cache';

export interface DepartureRequest {
  stopPlaceId: string;
  lineId: string;
  limit?: number;
  direction?: string;
  useCache?: boolean;
}

export interface BatchDepartureRequest {
  requests: DepartureRequest[];
  maxConcurrent?: number;
}

export interface ArrivalRequest {
  stopPlaceId: string;
  lineId: string;
  limit?: number;
  direction?: string;
  useCache?: boolean;
}

export interface TravelTimeRequest {
  departureStopId: string;
  arrivalStopId: string;
  lineId: string;
  direction?: string;
  useCache?: boolean;
}

export class DeparturesService extends BaseAPIService {
  constructor() {
    super({
      cacheTTL: 30000, // 30 sekund pro odjezdy
      retries: 2,      // M√©nƒõ retry pro odjezdy
      timeout: 8000    // Krat≈°√≠ timeout pro rychlej≈°√≠ UX
    });
  }

  /**
   * Z√≠sk√° odjezdy pro jednu zast√°vku
   */
  async getDepartures(request: DepartureRequest): Promise<DepartureBoardResponse> {
    const { stopPlaceId, lineId, limit = 3, direction, useCache = true } = request;
    
    try {
      const cacheKey = cacheKeys.departures(stopPlaceId, lineId, direction);
      
      console.log(`üîç Naƒç√≠t√°m odjezdy pro zast√°vku ${stopPlaceId}, linku ${lineId}, smƒõr: ${direction}`);
      
      const response = await this.get<any>(
        '/pid/departureboards',
        {
          params: {
            'ids[]': stopPlaceId,
            limit: 50,
            minutesAfter: 240,
            mode: 'departures',
            order: 'real'
          }
        },
        cacheKey,
        useCache
      );

      if (response.data && response.data.departures) {
        console.log(`üìä API vr√°tilo ${response.data.departures.length} odjezd≈Ø celkem`);
        
        const filteredDepartures = this.filterDepartures(
          response.data.departures,
          lineId,
          direction
        );

        const formattedDepartures = this.formatDepartures(filteredDepartures);
        const limitedDepartures = formattedDepartures.slice(0, limit);

        console.log(`‚úÖ Naƒçteno ${limitedDepartures.length} odjezd≈Ø pro zast√°vku ${stopPlaceId}, smƒõr: ${direction}`);
        
        return {
          departures: limitedDepartures,
          message: `Naƒçteno ${limitedDepartures.length} odjezd≈Ø`
        };
      }

      return {
        departures: [],
        message: '≈Ω√°dn√© odjezdy nenalezeny'
      };

    } catch (error) {
      console.error('Error fetching departures:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Z√≠sk√° p≈ô√≠jezdy pro jednu zast√°vku
   */
  async getArrivals(request: ArrivalRequest): Promise<ArrivalBoardResponse> {
    const { stopPlaceId, lineId, limit = 3, direction, useCache = true } = request;
    
    try {
      const cacheKey = `arrivals:${stopPlaceId}:${lineId}:${direction || 'all'}`;
      
      console.log(`üîç Naƒç√≠t√°m p≈ô√≠jezdy pro zast√°vku ${stopPlaceId}, linku ${lineId}, smƒõr: ${direction}`);
      
      const response = await this.get<any>(
        '/pid/departureboards',
        {
          params: {
            'ids[]': stopPlaceId,
            limit: 50,
            minutesAfter: 240,
            mode: 'arrivals',
            order: 'real'
          }
        },
        cacheKey,
        useCache
      );

      if (response.data && response.data.departures) {
        console.log(`üìä API vr√°tilo ${response.data.departures.length} p≈ô√≠jezd≈Ø celkem`);
        
        const filteredArrivals = this.filterDepartures(
          response.data.departures,
          lineId,
          direction
        );

        const formattedArrivals = this.formatArrivals(filteredArrivals);
        const limitedArrivals = formattedArrivals.slice(0, limit);

        console.log(`‚úÖ Naƒçteno ${limitedArrivals.length} p≈ô√≠jezd≈Ø pro zast√°vku ${stopPlaceId}, smƒõr: ${direction}`);
        
        return {
          arrivals: limitedArrivals,
          message: `Naƒçteno ${limitedArrivals.length} p≈ô√≠jezd≈Ø`
        };
      }

      return {
        arrivals: [],
        message: '≈Ω√°dn√© p≈ô√≠jezdy nenalezeny'
      };

    } catch (error) {
      console.error('Error fetching arrivals:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Z√≠sk√° odjezdy pro v√≠ce zast√°vek najednou (batch)
   */
  async getBatchDepartures(batchRequest: BatchDepartureRequest): Promise<DepartureBoardResponse[]> {
    const { requests, maxConcurrent = 5 } = batchRequest;
    
    console.log(`üöÄ Batch request pro ${requests.length} zast√°vek`);
    
    const requestFunctions = requests.map(request => 
      () => this.getDepartures(request)
    );

    try {
      const results = await this.batchRequests(requestFunctions, maxConcurrent);
      console.log(`‚úÖ Batch request dokonƒçen: ${results.length} √∫spƒõ≈°n√Ωch`);
      return results;
    } catch (error) {
      console.error('‚ùå Batch request failed:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Z√≠sk√° v≈°echny pot≈ôebn√© odjezdy pro souƒçasnou aplikaci
   */
  async getAllDepartures(): Promise<{
    rezToMasarykovo: DepartureBoardResponse;
    masarykovoToRez: DepartureBoardResponse;
    husinecsToKobylisy: DepartureBoardResponse;
    kobylisyToHusinec: DepartureBoardResponse;
  }> {
    const requests: DepartureRequest[] = [
      { stopPlaceId: 'U2823Z301', lineId: 'S4', limit: 3, direction: 'to-masarykovo' },
      { stopPlaceId: 'U480Z301', lineId: 'S4', limit: 3, direction: 'to-rez' },
      { stopPlaceId: 'U2245Z2', lineId: '371', limit: 3, direction: 'to-kobylisy' },
      { stopPlaceId: 'U675Z12', lineId: '371', limit: 3, direction: 'to-husinec' }
    ];

    try {
      const results = await this.getBatchDepartures({ requests, maxConcurrent: 4 });
      
      return {
        rezToMasarykovo: results[0] || { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' },
        masarykovoToRez: results[1] || { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' },
        husinecsToKobylisy: results[2] || { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' },
        kobylisyToHusinec: results[3] || { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' }
      };
    } catch (error) {
      console.error('Error fetching all departures:', error);
      throw error;
    }
  }

  /**
   * Filtruje odjezdy podle linky a smƒõru
   */
  private filterDepartures(departures: any[], lineId?: string, direction?: string): any[] {
    let filtered = departures;

    // Filtrov√°n√≠ podle linky
    if (lineId) {
      filtered = filtered.filter(dep => dep.route?.short_name === lineId);
      console.log(`[TRAIN] Po filtrov√°n√≠ podle linky ${lineId}: ${filtered.length} odjezd≈Ø`);
    }

    // Filtrov√°n√≠ podle smƒõru
    if (direction) {
      console.log(`üîç P≈òED filtrov√°n√≠m podle smƒõru "${direction}": ${filtered.length} odjezd≈Ø`);
      filtered.forEach((dep, index) => {
        console.log(`  ${index + 1}. "${dep.trip?.headsign || 'N/A'}" (${dep.route?.short_name || 'N/A'})`);
      });
      
      filtered = filtered.filter(dep => this.matchesDirection(dep, direction));
      console.log(`üìã Po filtrov√°n√≠ podle smƒõru: ${filtered.length} odjezd≈Ø`);
    }

    return filtered;
  }

  /**
   * Kontroluje, zda odjezd odpov√≠d√° smƒõru
   */
  private matchesDirection(departure: any, direction: string): boolean {
    const headsign = departure.trip?.headsign || '';
    
    console.log(`üéØ matchesDirection: checking "${headsign}" for direction "${direction}"`);
    
    let matches = false;
    switch (direction) {
      case 'to-masarykovo':
        matches = headsign.includes('Masarykovo') || headsign.includes('Praha');
        break;
      
      case 'to-rez':
        matches = (headsign.includes('√öst√≠') || headsign.includes('Kralupy') || headsign.includes('≈òe≈æ')) && 
               !headsign.includes('Praha');
        break;
      
      case 'to-kobylisy':
        matches = headsign.includes('Kobylisy') || headsign.includes('Praha') || headsign.includes('Klecany');
        break;
      
      case 'to-husinec':
        matches = (headsign.includes('Husinec') || headsign.includes('≈òe≈æ')) && 
               !headsign.includes('Klecany') && 
               !headsign.includes('Astrapark') &&
               !headsign.includes('Klec√°nky');
        break;
      
      default:
        matches = true;
        break;
    }
    
    console.log(`üéØ matchesDirection result: "${headsign}" ${matches ? '‚úÖ MATCHES' : '‚ùå DOES NOT MATCH'} "${direction}"`);
    return matches;
  }

  /**
   * Form√°tuje odjezdy do po≈æadovan√©ho form√°tu
   */
  private formatDepartures(departures: any[]): any[] {
    return departures.map(dep => ({
      id: dep.trip?.id || `dep_${Date.now()}_${Math.random()}`,
      scheduledTime: dep.departure_timestamp?.scheduled || dep.departure_timestamp?.predicted,
      predictedTime: dep.departure_timestamp?.predicted,
      delay: dep.delay?.minutes || 0,
      line: dep.route?.short_name || 'N/A',
      direction: dep.trip?.headsign || 'N/A',
      mode: dep.route?.type === 2 ? 'train' : 'bus',
      platform: dep.stop?.platform_code || null,
      routeId: dep.route?.short_name || 'N/A',
      tripId: dep.trip?.id || 'N/A'
    }));
  }

  /**
   * Form√°tuje p≈ô√≠jezdy do po≈æadovan√©ho form√°tu
   */
  private formatArrivals(arrivals: any[]): any[] {
    return arrivals.map(arr => ({
      id: arr.trip?.id || `arr_${Date.now()}_${Math.random()}`,
      scheduledTime: arr.arrival_timestamp?.scheduled || arr.arrival_timestamp?.predicted,
      predictedTime: arr.arrival_timestamp?.predicted,
      delay: arr.delay?.minutes || 0,
      line: arr.route?.short_name || 'N/A',
      direction: arr.trip?.headsign || 'N/A',
      mode: arr.route?.type === 2 ? 'train' : 'bus',
      platform: arr.stop?.platform_code || null,
      routeId: arr.route?.short_name || 'N/A',
      tripId: arr.trip?.id || 'N/A'
    }));
  }

  /**
   * Vypoƒç√≠t√° dobu j√≠zdy mezi dvƒõma zast√°vkami s vylep≈°enou logikou
   */
  async calculateTravelTime(request: TravelTimeRequest): Promise<TravelTimeCalculation[]> {
    const { departureStopId, arrivalStopId, lineId, direction, useCache = true } = request;
    
    try {
      console.log(`üöÄ Vypoƒç√≠t√°v√°m dobu j√≠zdy: ${departureStopId} ‚Üí ${arrivalStopId}, linka ${lineId}`);
      
      // Z√≠skat odjezdy a p≈ô√≠jezdy paralelnƒõ s vƒõt≈°√≠m limitem pro lep≈°√≠ p≈ôesnost
      const [departureResponse, arrivalResponse] = await Promise.allSettled([
        this.getDepartures({
          stopPlaceId: departureStopId,
          lineId,
          limit: 20, // V√≠ce dat pro lep≈°√≠ pr≈Ømƒõr
          direction,
          useCache
        }),
        this.getArrivals({
          stopPlaceId: arrivalStopId,
          lineId,
          limit: 20, // V√≠ce dat pro lep≈°√≠ pr≈Ømƒõr
          direction,
          useCache
        })
      ]);

      if (departureResponse.status === 'rejected' || arrivalResponse.status === 'rejected') {
        console.warn('‚ö†Ô∏è Nepoda≈ôilo se naƒç√≠st data pro v√Ωpoƒçet doby j√≠zdy');
        return [];
      }

      const departures = departureResponse.value.departures;
      const arrivals = arrivalResponse.value.arrivals;

      console.log(`üìä Naƒçteno ${departures.length} odjezd≈Ø a ${arrivals.length} p≈ô√≠jezd≈Ø`);

      // Sp√°rovat odjezdy s p≈ô√≠jezdy podle tripId
      const tripDurations: TravelTimeCalculation[] = [];
      const durationMap = new Map<string, number[]>(); // Pro seskupen√≠ podle linky

      // Pokud nejsou dostupn√© p≈ô√≠jezdy (koneƒçn√° zast√°vka), pou≈æijeme fallback
      if (arrivals.length === 0) {
        console.warn(`‚ö†Ô∏è ≈Ω√°dn√© p≈ô√≠jezdy na zast√°vku ${arrivalStopId} - pravdƒõpodobnƒõ koneƒçn√° zast√°vka`);
        
        // Pro autobusy 371 pou≈æijeme standardn√≠ dobu j√≠zdy na z√°kladƒõ smƒõru
        if (lineId === '371') {
          let estimatedDuration: number;
          
          // Urƒçit smƒõr na z√°kladƒõ zast√°vek
          if (departureStopId === 'U675Z12' && arrivalStopId === 'U2823Z301') {
            // Kobylisy ‚Üí ≈òe≈æ
            estimatedDuration = 20;
            console.log(`üïí Kobylisy ‚Üí ≈òe≈æ: ${estimatedDuration} minut`);
          } else if (departureStopId === 'U2245Z2' && arrivalStopId === 'U675Z12') {
            // Husinec ‚Üí Kobylisy (≈òe≈æ ‚Üí Kobylisy)
            estimatedDuration = 23;
            console.log(`üïí Husinec ‚Üí Kobylisy: ${estimatedDuration} minut`);
          } else {
            // Fallback pro ostatn√≠ smƒõry
            estimatedDuration = 20;
            console.log(`üïí Fallback doba j√≠zdy pro autobus ${lineId}: ${estimatedDuration} minut`);
          }
          
          return [{
            tripId: 'estimated_371',
            departureTime: new Date().toISOString(),
            arrivalTime: new Date(Date.now() + estimatedDuration * 60 * 1000).toISOString(),
            duration: estimatedDuration,
            lineId,
            sampleCount: 1
          }];
        }
        
        return [];
      }
      
      for (const departure of departures) {
        const matchingArrival = arrivals.find(arrival => arrival.tripId === departure.tripId);
        
        if (matchingArrival) {
          // Pou≈æ√≠t skuteƒçn√Ω ƒças odjezdu (s delay) a p≈ô√≠jezdu
          const actualDepartureTime = departure.delay && departure.delay > 0
            ? new Date(new Date(departure.scheduledTime).getTime() + departure.delay * 60 * 1000)
            : new Date(departure.scheduledTime);
            
          const actualArrivalTime = matchingArrival.delay && matchingArrival.delay > 0
            ? new Date(new Date(matchingArrival.scheduledTime).getTime() + matchingArrival.delay * 60 * 1000)
            : new Date(matchingArrival.scheduledTime);
          
          const duration = Math.round((actualArrivalTime.getTime() - actualDepartureTime.getTime()) / (1000 * 60));
          
          if (duration > 0 && duration < 180) { // Rozumn√© limity: 0-180 minut
            // Seskupit doby j√≠zdy podle linky pro v√Ωpoƒçet pr≈Ømƒõru
            if (!durationMap.has(departure.line)) {
              durationMap.set(departure.line, []);
            }
            durationMap.get(departure.line)!.push(duration);
            
            tripDurations.push({
              tripId: departure.tripId,
              line: departure.line,
              mode: departure.mode,
              duration,
              isRealTime: true,
              fallbackUsed: false,
              calculatedAt: new Date(),
              departureTime: actualDepartureTime,
              arrivalTime: actualArrivalTime,
              delay: departure.delay || 0
            });
          }
        }
      }

      // Vypoƒç√≠tat pr≈Ømƒõrnou dobu j√≠zdy pro ka≈ædou linku
      const averageDurations: TravelTimeCalculation[] = [];
      for (const [line, durations] of durationMap.entries()) {
        if (durations.length > 0) {
          const averageDuration = Math.round(durations.reduce((sum, d) => sum + d, 0) / durations.length);
          const mode = line === 'S4' ? 'train' : 'bus';
          
          averageDurations.push({
            tripId: `average_${line}`,
            line,
            mode,
            duration: averageDuration,
            isRealTime: true,
            fallbackUsed: false,
            calculatedAt: new Date(),
            sampleCount: durations.length,
            minDuration: Math.min(...durations),
            maxDuration: Math.max(...durations)
          });
        }
      }

      // Vr√°tit jak jednotliv√© j√≠zdy, tak pr≈Ømƒõrn√© hodnoty
      const allResults = [...tripDurations, ...averageDurations];
      
      console.log(`‚úÖ Vypoƒç√≠t√°no ${tripDurations.length} jednotliv√Ωch dob j√≠zdy a ${averageDurations.length} pr≈Ømƒõrn√Ωch pro linku ${lineId}`);
      return allResults;

    } catch (error) {
      console.error('Error calculating travel time:', error);
      throw this.handleError(error);
    }
  }

  /**
   * Zpracuje chyby a vr√°t√≠ standardizovan√Ω form√°t
   */
  private handleError(error: any): ApiError {
    if (error.response) {
      return {
        message: error.response.data?.error_message || 'Chyba p≈ôi naƒç√≠t√°n√≠ dat z PID API',
        status: error.response.status,
      };
    }
    
    return {
      message: 'Neoƒçek√°van√° chyba p≈ôi komunikaci s PID API',
    };
  }

  /**
   * Z√≠sk√° cache statistiku pro odjezdy
   */
  public getDeparturesCacheStats() {
    return this.getCacheStats();
  }

  /**
   * Vyƒçist√≠ cache pro odjezdy
   */
  public clearDeparturesCache(): void {
    this.clearCache();
  }
}

// Export instance slu≈æby
export const departuresService = new DeparturesService();
export default DeparturesService;
