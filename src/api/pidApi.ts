import axios from 'axios';
import { DepartureBoardResponse, ApiError } from '../types';
import { API_KEY } from '../constants';

// Golemio V2 PID Departure Boards API - funkƒçn√≠ endpoint
const V2_API_BASE_URL = 'https://api.golemio.cz/v2';

const api = axios.create({
  baseURL: V2_API_BASE_URL,
  headers: {
    'X-Access-Token': API_KEY,
    'Accept': 'application/json',
  },
});

// Funkce pro z√≠sk√°n√≠ odjezd≈Ø z V2 PID Departure Boards API
export const getDepartures = async (
  stopPlaceId: string,
  lineId: string,
  limit: number = 3,
  direction?: string
): Promise<DepartureBoardResponse> => {
  try {
    console.log(`üîç Naƒç√≠t√°m odjezdy pro zast√°vku ${stopPlaceId}, linku ${lineId}, smƒõr: ${direction}`);
    
    const response = await api.get('/pid/departureboards', {
      params: {
        'ids[]': stopPlaceId,
        limit: 50, // Zv√Ω≈°it limit na 50 pro lep≈°√≠ filtrov√°n√≠
        minutesAfter: 240, // 4 hodiny dop≈ôedu
        mode: 'departures',
        order: 'real'
      }
    });

    if (response.data && response.data.departures) {
      console.log(`üìä API vr√°tilo ${response.data.departures.length} odjezd≈Ø celkem`);
      
      // Filtrovat podle linky a smƒõru
      let filteredDepartures = response.data.departures;
      
      // Nejd≈ô√≠ve filtrovat podle linky
      if (lineId) {
        filteredDepartures = response.data.departures.filter(
          (dep: any) => dep.route?.short_name === lineId
        );
        console.log(`üöÇ Po filtrov√°n√≠ podle linky ${lineId}: ${filteredDepartures.length} odjezd≈Ø`);
      }
      
      // Pak filtrovat podle smƒõru, pokud je specifikov√°n
      if (direction) {
        console.log(`üîç Filtruji podle smƒõru: ${direction}`);
        console.log(`üìã P≈ôed filtrov√°n√≠m: ${filteredDepartures.length} odjezd≈Ø`);
        
        filteredDepartures = filteredDepartures.filter((dep: any) => {
          const headsign = dep.trip?.headsign || '';
          console.log(`üö¶ Kontroluji odjezd: ${dep.route?.short_name} ‚Üí ${headsign}`);
          
          if (direction === 'to-masarykovo') {
            const matches = headsign.includes('Masarykovo') || headsign.includes('Praha');
            console.log(`  ‚úÖ Smƒõr Praha: ${matches ? 'ANO' : 'NE'} (${headsign})`);
            return matches;
          } else if (direction === 'to-rez') {
            // Pro smƒõr z Prahy do ≈òe≈æe: √öst√≠, Kralupy, ≈òe≈æ, ale ne Praha
            const matches = (headsign.includes('√öst√≠') || headsign.includes('Kralupy') || headsign.includes('≈òe≈æ')) && 
                           !headsign.includes('Praha');
            console.log(`  ‚úÖ Smƒõr ≈òe≈æe: ${matches ? 'ANO' : 'NE'} (${headsign})`);
            return matches;
          } else if (direction === 'to-husinec') {
            // Pro autobusy z Prahy do ≈òe≈æe: pouze ty co jedou do Husince/≈òe≈æe, ne do Klecany
            const matches = (headsign.includes('Husinec') || headsign.includes('≈òe≈æ')) && 
                           !headsign.includes('Klecany') && 
                           !headsign.includes('Astrapark') &&
                           !headsign.includes('Klec√°nky');
            console.log(`  ‚úÖ Smƒõr Husinec/≈òe≈æ: ${matches ? 'ANO' : 'NE'} (${headsign})`);
            return matches;
          }
          return true;
        });
        
        console.log(`üìã Po filtrov√°n√≠: ${filteredDepartures.length} odjezd≈Ø`);
      }

      // P≈ôeform√°tovat data do po≈æadovan√©ho form√°tu
      const formattedDepartures = filteredDepartures.map((dep: any) => ({
        id: dep.trip?.id || `dep_${Date.now()}_${Math.random()}`,
        scheduledTime: dep.departure_timestamp?.scheduled || dep.departure_timestamp?.predicted,
        predictedTime: dep.departure_timestamp?.predicted,

        delay: dep.delay?.minutes || 0,
        line: dep.route?.short_name || 'N/A',
        direction: dep.trip?.headsign || 'N/A',
        mode: dep.route?.type === 2 ? 'train' : 'bus',
        platform: dep.stop?.platform_code || null,
        routeId: dep.route?.short_name || 'N/A',
        tripId: dep.trip?.id || 'N/A'
      }));

      // Omezit na po≈æadovan√Ω poƒçet odjezd≈Ø
      const limitedDepartures = formattedDepartures.slice(0, limit);

      console.log(`‚úÖ Naƒçteno ${limitedDepartures.length} odjezd≈Ø pro zast√°vku ${stopPlaceId}, smƒõr: ${direction}`);
      
      return {
        departures: limitedDepartures,
        message: `Naƒçteno ${limitedDepartures.length} odjezd≈Ø`
      };
    }

    return {
      departures: [],
      message: '≈Ω√°dn√© odjezdy nenalezeny'
    };

  } catch (error) {
    console.error('Error fetching departures from V2 API:', error);
    
    if (axios.isAxiosError(error)) {
      throw {
        message: error.response?.data?.error_message || 'Chyba p≈ôi naƒç√≠t√°n√≠ dat z PID API',
        status: error.response?.status,
      } as ApiError;
    }
    
    throw {
      message: 'Neoƒçek√°van√° chyba p≈ôi komunikaci s PID API',
    } as ApiError;
  }
};

// Funkce pro z√≠sk√°n√≠ v≈°ech pot≈ôebn√Ωch odjezd≈Ø
export const getAllDepartures = async () => {
  try {
    console.log('üöÄ Naƒç√≠t√°m v≈°echny odjezdy z V2 PID API...');
    
    const [rezToMasarykovo, masarykovoToRez, husinecsToKobylisy, kobylisyToHusinec] = await Promise.allSettled([
      getDepartures('U2823Z301', 'S4', 3, 'to-masarykovo'), // ≈òe≈æ ‚Üí Praha Masarykovo (vlak S4)
      getDepartures('U480Z301', 'S4', 3, 'to-rez'),         // Praha Masarykovo ‚Üí ≈òe≈æ (vlak S4)
      getDepartures('U2245Z2', '371', 3, 'to-kobylisy'),    // Husinec ‚Üí Kobylisy (autobus 371)
      getDepartures('U675Z12', '371', 3, 'to-husinec')      // Kobylisy ‚Üí Husinec (autobus 371)
    ]);

    return {
      rezToMasarykovo: rezToMasarykovo.status === 'fulfilled' ? rezToMasarykovo.value : { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' },
      masarykovoToRez: masarykovoToRez.status === 'fulfilled' ? masarykovoToRez.value : { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' },
      husinecsToKobylisy: husinecsToKobylisy.status === 'fulfilled' ? husinecsToKobylisy.value : { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' },
      kobylisyToHusinec: kobylisyToHusinec.status === 'fulfilled' ? kobylisyToHusinec.value : { departures: [], message: 'Chyba p≈ôi naƒç√≠t√°n√≠' }
    };
  } catch (error) {
    console.error('Error fetching all departures:', error);
    throw error;
  }
};
